/*
 * Copyright (c) 2015 Pantheon Technologies s.r.o. and others. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */

module topology-correlation {

    namespace "urn:opendaylight:topology:correlation";
    prefix "topo-correlation";

    import network-topology {prefix topo; revision-date "2013-10-21";}
    import ietf-inet-types {prefix inet;}
    import yang-ext {prefix ext; revision-date "2013-07-09";}

    revision "2015-01-21" {
        description "Topology Processing Framework correlation definition";
    }

    typedef leaf-path {
        description "Path to leaf that shall be compared.
        This definition should be tuned later.
        Something like RelativeSchemaPath might be useful.";
        type string;
    }

    typedef correlation-item-enum {
        description  "Supported corelation items";
        type enumeration {
            enum node {
                description "node";
            }
            enum link {
                description "link";
            }
            enum termination-point {
                description "termination-point";
            }
        }
    }

    identity correlation-base {
        description "Base identity for correlation types";
    }

    identity equality {
        description "Only aggregated correlation-items (nodes/links/termination points) will
                     be present in overlay topology.";
        base correlation-base;
    }

    identity unification {
        description "All correlation-items (nodes/links/termination points) will be present
                     in overlay topology. Those that can be aggregated, will be aggregated";
        base correlation-base;
    }

    identity filtration {
        description "Only nodes with specific leaf value will be present in overlay topology.";
        base correlation-base;
    }

    identity filter-base {
        description "Base identity for filter types";
    }

    identity ipv4-address {
        description "Filters based on IPv4 address and mask.";
        base filter-base;
    }

    identity ipv6-address {
        description "Filters based on IPv6 address and mask.";
        base filter-base;
    }

    identity range-number {
        description "Filters filtering range of numbers between min and max value.";
        base filter-base;
    }

    identity range-string {
        description "Filters filtering range of strings between min and max value.";
        base filter-base;
    }

    identity specific-number {
        description "Filters out int values corresponding to a specific number.";
        base filter-base;
    }

    identity specific-string {
        description "Filters out string values corresponding to a specific string.";
        base filter-base;
    }

    augment "/topo:network-topology/topo:topology" {
        ext:augment-identifier "correlation-augment";
        container correlations {
            list correlation {
                key correlation-id;
                leaf correlation-id {
                    type string;
                    description "User defined content to uniquely identify the correlation. This value is not used for further processing.";
                }
                leaf type {
                    type identityref {
                        base correlation-base;
                    }
                }
                leaf correlation-item {
                    type correlation-item-enum;
                }
                choice correlation-type {
                    case equality-case {
                        container equality {
                            uses mapping-grouping;
                        }
                    }
                    case unification-case {
                        container unification {
                            uses mapping-grouping;
                        }
                    }
                    case filtration-case {
                        container filtration {
                            list filter {
                                key "underlay-topology target-field";
                                leaf filter-type {
                                    type identityref {
                                        base filter-base;
                                    }
                                }
                                leaf underlay-topology {
                                    type string;
                                    description "Input topology which will be filtered.";
                                }
                                leaf target-field {
                                    type leaf-path;
                                    description "Path to target field";
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    augment "/topo:network-topology/topo:topology/topo-correlation:correlations/topo-correlation:correlation/topo-correlation:correlation-type/topo-correlation:filtration-case/topo-correlation:filtration/topo-correlation:filter" {
        ext:augment-identifier "ipv4-address-augment";
        leaf ipv4-address {
            type inet:ip-prefix;
        }
    }

    augment "/topo:network-topology/topo:topology/topo-correlation:correlations/topo-correlation:correlation/topo-correlation:correlation-type/topo-correlation:filtration-case/topo-correlation:filtration/topo-correlation:filter" {
        ext:augment-identifier "ipv6-address-augment";
        leaf ipv6-address {
            type inet:ip-prefix;
        }
    }

    augment "/topo:network-topology/topo:topology/topo-correlation:correlations/topo-correlation:correlation/topo-correlation:correlation-type/topo-correlation:filtration-case/topo-correlation:filtration/topo-correlation:filter" {
        ext:augment-identifier "range-number-augment";
        leaf min-number-value {
            type uint16;
        }
        leaf max-number-value {
            type uint16;
        }
    }

    augment "/topo:network-topology/topo:topology/topo-correlation:correlations/topo-correlation:correlation/topo-correlation:correlation-type/topo-correlation:filtration-case/topo-correlation:filtration/topo-correlation:filter" {
        ext:augment-identifier "range-string-augment";
        leaf min-string-value {
            type string;
        }
        leaf max-string-value {
            type string;
        }
    }

    augment "/topo:network-topology/topo:topology/topo-correlation:correlations/topo-correlation:correlation/topo-correlation:correlation-type/topo-correlation:filtration-case/topo-correlation:filtration/topo-correlation:filter" {
        ext:augment-identifier "specific-number-augment";
        leaf specific-number {
            type uint16;
        }
    }

    augment "/topo:network-topology/topo:topology/topo-correlation:correlations/topo-correlation:correlation/topo-correlation:correlation-type/topo-correlation:filtration-case/topo-correlation:filtration/topo-correlation:filter" {
        ext:augment-identifier "specific-string-augment";
        leaf specific-string {
            type string;
        }
    }

    grouping mapping-grouping {
        list mapping {
            key "underlay-topology target-field";
            leaf underlay-topology {
                type string;
                description "Input topology which will be used for aggregation.";
            }
            leaf target-field {
                type leaf-path;
                description "Path to target field";
            }
            leaf aggregate-inside {
                type boolean;
                mandatory true;
                description "True if aggregation should happen even inside the same topology.";
            }
        }
    }
}
